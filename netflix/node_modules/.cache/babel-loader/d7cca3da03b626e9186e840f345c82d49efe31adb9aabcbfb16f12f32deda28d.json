{"ast":null,"code":"import axios from \"axios\";\nimport { Now_Playing_Movie, options } from \"../utils/constant\";\nimport { getNowPlayingMovies } from \"../redux/movieSlice\";\nimport { useDispatch } from \"react-redux\";\nconst dispatch = useDispatch;\nconst useNowPlayingMovies = async () => {\n  try {\n    const res = await axios.get(Now_Playing_Movie, options);\n    console.log(res.data.results);\n    dispatch(getNowPlayingMovies(res.data.results));\n  } catch (error) {\n    //     // console.log(\"Hi\");\n    console.log(error);\n  }\n};\nexport default useNowPlayingMovies;","map":{"version":3,"names":["axios","Now_Playing_Movie","options","getNowPlayingMovies","useDispatch","dispatch","useNowPlayingMovies","res","get","console","log","data","results","error"],"sources":["C:/Users/SANCHYA/Desktop/webdevelopment/netflix clone/netflix/src/hooks/useNowPlayingMovies.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Now_Playing_Movie , options} from \"../utils/constant\";\r\nimport { getNowPlayingMovies } from \"../redux/movieSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst dispatch = useDispatch;\r\nconst useNowPlayingMovies =async() =>{\r\n    try{\r\n      const res = await axios.get(Now_Playing_Movie,options)\r\n      console.log(res.data.results);\r\n      dispatch(getNowPlayingMovies(res.data.results));\r\n    }\r\n    catch(error){\r\n  //     // console.log(\"Hi\");\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  export default useNowPlayingMovies;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,iBAAiB,EAAGC,OAAO,QAAO,mBAAmB;AAC9D,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,WAAW,QAAQ,aAAa;AAEzC,MAAMC,QAAQ,GAAGD,WAAW;AAC5B,MAAME,mBAAmB,GAAE,MAAAA,CAAA,KAAU;EACjC,IAAG;IACD,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,iBAAiB,EAACC,OAAO,CAAC;IACtDO,OAAO,CAACC,GAAG,CAACH,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC;IAC7BP,QAAQ,CAACF,mBAAmB,CAACI,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC;EACjD,CAAC,CACD,OAAMC,KAAK,EAAC;IACd;IACIJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EACpB;AACF,CAAC;AAED,eAAeP,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}